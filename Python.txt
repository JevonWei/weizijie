基础知识

运算符
	逻辑运算符
		and 
		or 
		not
		参数运算的成员只能是boot类型，或者可以隐式转化为boot类型的类型
		总是从左到右的计算，一旦能够决定表达式最终的值，将立刻停止计算并返回
	
	位运算符
		& 按位与
		| 按位或
		^ 按位异或
		~ 按位取反
	
	移位运算符
		>> 右移
		<< 左移
		
	运算符的优先级
		算术运算符优先级高于比较运算符
		比较运算符优先级高于逻辑运算符
		
		
三元操作符
	语法：
		x if 条件 else y
	
	eg
		small = x if x < y else y
		
assert(断言)
	assert这个关键字称之为“断言”，当这个关键字后面的条件为假的时候，程序自动崩溃并抛出AssertionError的异常。
	eg：
		assert 3 > 4
	
	一般来说我们可以用Ta在程序中置入检查点，当需要确保程序中的某个条件一定为真才能让程序正常工作的话，assert关键字就可以使用了。
	
		
range()
	语法：
		range([start,]stop[,.step=1])
		- 此BIF有三个参数，其中用[]括号括起来的两个参数表示这两个参数是可选的
		- step=1，表第三个参数的值默认值为1
		- range这个BIF的作用是生成一个从start参数的值开始到stop参数的值结束的数字序列
	eg：
		for i in range(1,10,2):
		print(i)

列表
	append()
		向列表中追加新元素
		mix.extend('san')
	
	extend()
		向列表中添加另一个列表
		mix.extend(['san','ean'])
	
	insert()
		在列表指定位置插入新元素
		mix.insert(0,'Jevon') 	在mix列表的0位置插入Jevon元素
	
	remove()
		移除列表中指定的元素
		eg：
			mix.remove('dan')
	
	del
		删除列表及列表元素
		del mix[1] 删除mix列表的第1个元素
		
	pop()
		将列表中的某个元素移除列表并打印
		mix.pop()    	默认删除列表中最后一个元素
		mix.pop(1)		删除列表中的第一个元素
		name=mix.pop(1)	删除列表中的第一个元素，并将第一个元素赋值给name变量
	
	
	slice 列表分片
		一次性获取列表的多个元素
		eg：
			member[1:3]     获取member列表的第1到3个元素
		
	
	count()
		列出列表中指定字段出现的次数
	
	index()
		输出指定字段在列表中出现的索引位置
	
	reverse()
		将列表逆向排列
		eg：
			>>> list
			[123, 111, 23]
			>>> list.reverse()
			>>> list
			[23, 111, 123]
			
	sort()
		列表元素排序
		eg：
			>>> list
			[1, 2, 4, 2, 6, 7, 4, 2]
			>>> list.sort()
			>>> list
			[1, 2, 2, 2, 4, 4, 6, 7]
			
			将列表逆向排序
			>>> list
			[1, 2, 2, 2, 4, 4, 6, 7]
			>>> list.sort(reverse=True)
			>>> list
			[7, 6, 4, 4, 2, 2, 2, 1]
	
元组(tuple)
	元组为不可修改的列表
	dan = (1,2,3,4,5)
	dan = 1,2,3,4,5
	
	元组中插入元素
		>>> dan
		(1, 2, 3, 4)
		>>> dan = dan[:2] + ('dan',) + dan[2:]
		>>> dan
		(1, 2, 'dan', 3, 4)


















	

	
	
	